<Project>

  <!-- Configuration; can be set up in the project. -->
  <PropertyGroup>

    <!-- The format to use for the API reference sources. This gets normalized for easier conditions. -->
    <_ApiReferenceFormat />
    <_ApiReferenceFormat Condition=" '$(ApiReferenceFormat)' == '' ">CS</_ApiReferenceFormat>
    <_ApiReferenceFormat Condition=" '$(ApiReferenceFormat)' == 'CS' ">CS</_ApiReferenceFormat>
    <_ApiReferenceFormat Condition=" '$(ApiReferenceFormat)' == 'CSharp' ">CS</_ApiReferenceFormat>
    <_ApiReferenceFormat Condition=" '$(ApiReferenceFormat)' == 'CS-MD' ">CS-MD</_ApiReferenceFormat>
    <_ApiReferenceFormat Condition=" '$(ApiReferenceFormat)' == 'CSharp-MarkDown' ">CS-MD</_ApiReferenceFormat>

    <!-- The directories to search for the dependencies of the output assemblies. -->
    <ApiReferenceLibraryPath Condition=" '$(ApiReferenceLibraryPath)' == '' " />

    <!-- The directory to use for the API reference sources. -->
    <ApiReferenceOutputDir Condition=" '$(ApiReferenceOutputDir)' == '' ">$(TargetDir)</ApiReferenceOutputDir>

    <!-- The extension to use for the API reference sources. -->
    <ApiReferenceOutputExt Condition=" '$(ApiReferenceOutputExt)' == '' And '$(_ApiReferenceFormat)' == 'CS' ">.cs</ApiReferenceOutputExt>
    <ApiReferenceOutputExt Condition=" '$(ApiReferenceOutputExt)' == '' And '$(_ApiReferenceFormat)' == 'CS-MD' ">.cs.md</ApiReferenceOutputExt>
    <ApiReferenceOutputExt Condition=" '$(ApiReferenceOutputExt)' == '' ">.txt</ApiReferenceOutputExt>

    <!-- The full path to the file to use for the API reference sources. -->
    <ApiReferenceOutputPath Condition=" '$(ApiReferenceOutputPath)' == '' ">$([MSBuild]::EnsureTrailingSlash('$(ApiReferenceOutputDir)'))$(TargetName)$(ApiReferenceOutputExt)</ApiReferenceOutputPath>

    <!-- Detetermines whether the folder used for API reference sources should be created by the build. -->
    <CreateApiReferenceOutputDir Condition=" '$(CreateApiReferenceOutputDir)' == '' ">false</CreateApiReferenceOutputDir>

    <!-- Detetermines whether API reference sources should be generated. -->
    <GenerateApiReference Condition=" '$(GenerateApiReference)' == '' ">true</GenerateApiReference>

    <!-- Detetermines what elements should be included. -->
    <VisibilityForApiReference Condition=" '$(VisibilityForApiReference)' == '' ">public</VisibilityForApiReference>

    <!-- If set to true, the output files are not registered in @(FileWrites). -->
    <SkipApiReferenceOutputPathFileWrite Condition=" '$(SkipApiReferenceOutputPathFileWrite)' == '' ">false</SkipApiReferenceOutputPathFileWrite>

  </PropertyGroup>

  <!-- Declare the task itself. -->
  <UsingTask TaskName="GenerateApiReference" TaskFactory="TaskHostFactory"
             AssemblyFile="$(MSBuildThisFileDirectory)netstandard2.0\Zastai.Build.ApiReference.dll" />

  <!-- Hook into the regular build process at a time when all our inputs are available. -->
  <PropertyGroup Condition=" '$(GenerateApiReference)' == 'true' ">
    <PrepareForRunDependsOn>$(PrepareForRunDependsOn);GenerateApiReference</PrepareForRunDependsOn>
  </PropertyGroup>

  <Target Name="_DoNotBuildProjectReferences">
    <PropertyGroup>
      <BuildProjectReferences>false</BuildProjectReferences>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateApiReference" Inputs="@(IntermediateAssembly)" Outputs="$(ApiReferenceOutputPath)"
          DependsOnTargets="_DoNotBuildProjectReferences;ResolveAssemblyReferences">

    <!-- Invalid Reference Format: Error. -->
    <Error Text="Invalid API Reference format: $(ApiReferenceFormat)." Condition=" '$(_ApiReferenceFormat)' == '' " />

    <!-- Running the task properly requires a sufficiently recent MSBuild. -->
    <Error Text="The API reference generation requires a recent MSBuild (version >= 17.1.0, not $(MSBuildVersion))."
           Condition=" $(MSBuildVersion) &lt; 17.1.0 " />

    <!-- Create the output directory (if requested to do so). -->
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetFullPath('$(ApiReferenceOutputPath)'))))"
             Condition=" '$(CreateApiReferenceOutputDir)' == 'true' "/>

    <!-- Enum Handling -->
    <ItemGroup>
      <_ApiReferenceEnumHandling Include="binary" Condition=" '$(EnableBinaryEnumHandling)' == 'true' " />
      <_ApiReferenceEnumHandling Include="char" Condition=" '$(EnableCharEnumHandling)' == 'true' " />
      <_ApiReferenceEnumHandling Include="hex" Condition=" '$(EnableHexEnumHandling)' == 'true' " />
    </ItemGroup>

    <!-- Reference Path Configured: Use. -->
    <ItemGroup Condition=" '$(ApiReferenceLibraryPath)' != '' ">
      <_ConfiguredDirectoriesContainingReferencedAssemblies Include="$(ApiReferenceLibraryPath)" />
      <_AllDirectoriesContainingReferencedAssemblies Include="@(_ConfiguredDirectoriesContainingReferencedAssemblies->TrimEnd('\'))" />
    </ItemGroup>

    <!-- Reference Path NOT Configured: Use the references computed by the build. -->
    <ItemGroup Condition=" '$(ApiReferenceLibraryPath)' == '' ">
      <_AllDirectoriesContainingReferencedAssemblies Include="@(ReferencePath->'%(RootDir)%(Directory)'->TrimEnd('\'))" />
    </ItemGroup>

    <ItemGroup>
      <!-- Remove duplicates and retain only the names. -->
      <_DirectoriesContainingReferencedAssemblies Include="%(_AllDirectoriesContainingReferencedAssemblies.Identity)" />
    </ItemGroup>

    <GenerateApiReference Assembly="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
                          EnumHandling="@(_ApiReferenceEnumHandling, ',')"
                          ExcludeAttributes="@(APIReferenceExcludeAttribute)"
                          Format="$(_ApiReferenceFormat)"
                          IncludeAttributes="@(APIReferenceIncludeAttribute)"
                          LibraryPath="@(_DirectoriesContainingReferencedAssemblies)"
                          OutputPath="$(ApiReferenceOutputPath)"
                          Visibility="$(VisibilityForApiReference)" />

    <ItemGroup>
      <FileWrites Condition=" '$(SkipApiReferenceOutputPathFileWrite)' != 'true' " Include="$(ApiReferenceOutputPath) "/>
    </ItemGroup>

    <Message Text="Generated API Reference: $(ApiReferenceOutputPath)" Importance="high" />

  </Target>

</Project>
